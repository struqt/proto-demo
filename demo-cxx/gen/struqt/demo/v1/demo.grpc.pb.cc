// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: struqt/demo/v1/demo.proto

#include "struqt/demo/v1/demo.pb.h"
#include "struqt/demo/v1/demo.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace struqt {
namespace demo {
namespace v1 {

static const char* BasicService_method_names[] = {
  "/struqt.demo.v1.BasicService/JsonRpc",
};

std::unique_ptr< BasicService::Stub> BasicService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BasicService::Stub> stub(new BasicService::Stub(channel, options));
  return stub;
}

BasicService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_JsonRpc_(BasicService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BasicService::Stub::JsonRpc(::grpc::ClientContext* context, const ::struqt::demo::v1::JsonRpcRequest& request, ::struqt::demo::v1::JsonRpcResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::struqt::demo::v1::JsonRpcRequest, ::struqt::demo::v1::JsonRpcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_JsonRpc_, context, request, response);
}

void BasicService::Stub::async::JsonRpc(::grpc::ClientContext* context, const ::struqt::demo::v1::JsonRpcRequest* request, ::struqt::demo::v1::JsonRpcResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::struqt::demo::v1::JsonRpcRequest, ::struqt::demo::v1::JsonRpcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JsonRpc_, context, request, response, std::move(f));
}

void BasicService::Stub::async::JsonRpc(::grpc::ClientContext* context, const ::struqt::demo::v1::JsonRpcRequest* request, ::struqt::demo::v1::JsonRpcResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JsonRpc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::struqt::demo::v1::JsonRpcResponse>* BasicService::Stub::PrepareAsyncJsonRpcRaw(::grpc::ClientContext* context, const ::struqt::demo::v1::JsonRpcRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::struqt::demo::v1::JsonRpcResponse, ::struqt::demo::v1::JsonRpcRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_JsonRpc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::struqt::demo::v1::JsonRpcResponse>* BasicService::Stub::AsyncJsonRpcRaw(::grpc::ClientContext* context, const ::struqt::demo::v1::JsonRpcRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncJsonRpcRaw(context, request, cq);
  result->StartCall();
  return result;
}

BasicService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BasicService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BasicService::Service, ::struqt::demo::v1::JsonRpcRequest, ::struqt::demo::v1::JsonRpcResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BasicService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::struqt::demo::v1::JsonRpcRequest* req,
             ::struqt::demo::v1::JsonRpcResponse* resp) {
               return service->JsonRpc(ctx, req, resp);
             }, this)));
}

BasicService::Service::~Service() {
}

::grpc::Status BasicService::Service::JsonRpc(::grpc::ServerContext* context, const ::struqt::demo::v1::JsonRpcRequest* request, ::struqt::demo::v1::JsonRpcResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* DemoService_method_names[] = {
  "/struqt.demo.v1.DemoService/Echo",
};

std::unique_ptr< DemoService::Stub> DemoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DemoService::Stub> stub(new DemoService::Stub(channel, options));
  return stub;
}

DemoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Echo_(DemoService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DemoService::Stub::Echo(::grpc::ClientContext* context, const ::struqt::demo::v1::EchoRequest& request, ::struqt::demo::v1::EchoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::struqt::demo::v1::EchoRequest, ::struqt::demo::v1::EchoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Echo_, context, request, response);
}

void DemoService::Stub::async::Echo(::grpc::ClientContext* context, const ::struqt::demo::v1::EchoRequest* request, ::struqt::demo::v1::EchoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::struqt::demo::v1::EchoRequest, ::struqt::demo::v1::EchoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Echo_, context, request, response, std::move(f));
}

void DemoService::Stub::async::Echo(::grpc::ClientContext* context, const ::struqt::demo::v1::EchoRequest* request, ::struqt::demo::v1::EchoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Echo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::struqt::demo::v1::EchoResponse>* DemoService::Stub::PrepareAsyncEchoRaw(::grpc::ClientContext* context, const ::struqt::demo::v1::EchoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::struqt::demo::v1::EchoResponse, ::struqt::demo::v1::EchoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Echo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::struqt::demo::v1::EchoResponse>* DemoService::Stub::AsyncEchoRaw(::grpc::ClientContext* context, const ::struqt::demo::v1::EchoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEchoRaw(context, request, cq);
  result->StartCall();
  return result;
}

DemoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DemoService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DemoService::Service, ::struqt::demo::v1::EchoRequest, ::struqt::demo::v1::EchoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DemoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::struqt::demo::v1::EchoRequest* req,
             ::struqt::demo::v1::EchoResponse* resp) {
               return service->Echo(ctx, req, resp);
             }, this)));
}

DemoService::Service::~Service() {
}

::grpc::Status DemoService::Service::Echo(::grpc::ServerContext* context, const ::struqt::demo::v1::EchoRequest* request, ::struqt::demo::v1::EchoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace struqt
}  // namespace demo
}  // namespace v1

