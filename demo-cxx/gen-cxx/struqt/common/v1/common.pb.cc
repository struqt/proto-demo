// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: struqt/common/v1/common.proto

#include "struqt/common/v1/common.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace struqt {
namespace common {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR GetServerInfoRequest::GetServerInfoRequest(
    ::_pbi::ConstantInitialized) {}
struct GetServerInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetServerInfoRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetServerInfoRequestDefaultTypeInternal() {}
  union {
    GetServerInfoRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetServerInfoRequestDefaultTypeInternal _GetServerInfoRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetServerInfoResponse::GetServerInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.started_at_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.server_id_)*/ 0

  , /*decltype(_impl_.status_)*/ 0
} {}
struct GetServerInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetServerInfoResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetServerInfoResponseDefaultTypeInternal() {}
  union {
    GetServerInfoResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetServerInfoResponseDefaultTypeInternal _GetServerInfoResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Dummy::Dummy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DummyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DummyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DummyDefaultTypeInternal() {}
  union {
    Dummy _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DummyDefaultTypeInternal _Dummy_default_instance_;
}  // namespace v1
}  // namespace common
}  // namespace struqt
static ::_pb::Metadata file_level_metadata_struqt_2fcommon_2fv1_2fcommon_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_struqt_2fcommon_2fv1_2fcommon_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_struqt_2fcommon_2fv1_2fcommon_2eproto = nullptr;
const ::uint32_t TableStruct_struqt_2fcommon_2fv1_2fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::struqt::common::v1::GetServerInfoRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::struqt::common::v1::GetServerInfoResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::struqt::common::v1::GetServerInfoResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::struqt::common::v1::GetServerInfoResponse, _impl_.server_id_),
    PROTOBUF_FIELD_OFFSET(::struqt::common::v1::GetServerInfoResponse, _impl_.started_at_),
    PROTOBUF_FIELD_OFFSET(::struqt::common::v1::GetServerInfoResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::struqt::common::v1::GetServerInfoResponse, _impl_.timestamp_),
    ~0u,
    0,
    ~0u,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::struqt::common::v1::Dummy, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::struqt::common::v1::Dummy, _impl_.version_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::struqt::common::v1::GetServerInfoRequest)},
        { 8, 20, -1, sizeof(::struqt::common::v1::GetServerInfoResponse)},
        { 24, -1, -1, sizeof(::struqt::common::v1::Dummy)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::struqt::common::v1::_GetServerInfoRequest_default_instance_._instance,
    &::struqt::common::v1::_GetServerInfoResponse_default_instance_._instance,
    &::struqt::common::v1::_Dummy_default_instance_._instance,
};
const char descriptor_table_protodef_struqt_2fcommon_2fv1_2fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\035struqt/common/v1/common.proto\022\020struqt."
    "common.v1\032\034google/api/annotations.proto\032"
    "\037google/api/field_behavior.proto\032\037google"
    "/protobuf/timestamp.proto\"\034\n\024GetServerIn"
    "foRequestJ\004\010\001\020\025\"\330\001\n\025GetServerInfoRespons"
    "e\022\030\n\tserver_id\030\026 \001(\005B\005\342A\002\005\002\0224\n\nstarted_a"
    "t\030\027 \001(\0132\032.google.protobuf.TimestampB\004\342A\001"
    "\005\0224\n\006status\030\030 \001(\0162\036.struqt.common.v1.Ser"
    "verStatusB\004\342A\001\005\0223\n\ttimestamp\030\031 \001(\0132\032.goo"
    "gle.protobuf.TimestampB\004\342A\001\002J\004\010\001\020\025\"\030\n\005Du"
    "mmy\022\017\n\007version\030\001 \001(\005*\233\001\n\014ServerStatus\022\035\n"
    "\031SERVER_STATUS_UNSPECIFIED\020\000\022\031\n\025SERVER_S"
    "TATUS_INITIAL\020\001\022\032\n\026SERVER_STATUS_STARTIN"
    "G\020\002\022\031\n\025SERVER_STATUS_RUNNING\020\003\022\032\n\026SERVER"
    "_STATUS_SHUTDOWN\020\0042\222\001\n\rCommonService\022\200\001\n"
    "\rGetServerInfo\022&.struqt.common.v1.GetSer"
    "verInfoRequest\032\'.struqt.common.v1.GetSer"
    "verInfoResponse\"\036\202\323\344\223\002\030\022\026/common/v1/serv"
    "er-infoB`\n\032com.struqt.proto.common.v1Z/g"
    "ithub.com/struqt/proto/struqt/common/v1;"
    "common\252\002\020Struqt.Common.V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_struqt_2fcommon_2fv1_2fcommon_2eproto_deps[3] =
    {
        &::descriptor_table_google_2fapi_2fannotations_2eproto,
        &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_struqt_2fcommon_2fv1_2fcommon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_struqt_2fcommon_2fv1_2fcommon_2eproto = {
    false,
    false,
    833,
    descriptor_table_protodef_struqt_2fcommon_2fv1_2fcommon_2eproto,
    "struqt/common/v1/common.proto",
    &descriptor_table_struqt_2fcommon_2fv1_2fcommon_2eproto_once,
    descriptor_table_struqt_2fcommon_2fv1_2fcommon_2eproto_deps,
    3,
    3,
    schemas,
    file_default_instances,
    TableStruct_struqt_2fcommon_2fv1_2fcommon_2eproto::offsets,
    file_level_metadata_struqt_2fcommon_2fv1_2fcommon_2eproto,
    file_level_enum_descriptors_struqt_2fcommon_2fv1_2fcommon_2eproto,
    file_level_service_descriptors_struqt_2fcommon_2fv1_2fcommon_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_struqt_2fcommon_2fv1_2fcommon_2eproto_getter() {
  return &descriptor_table_struqt_2fcommon_2fv1_2fcommon_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_struqt_2fcommon_2fv1_2fcommon_2eproto(&descriptor_table_struqt_2fcommon_2fv1_2fcommon_2eproto);
namespace struqt {
namespace common {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_struqt_2fcommon_2fv1_2fcommon_2eproto);
  return file_level_enum_descriptors_struqt_2fcommon_2fv1_2fcommon_2eproto[0];
}
bool ServerStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class GetServerInfoRequest::_Internal {
 public:
};

GetServerInfoRequest::GetServerInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:struqt.common.v1.GetServerInfoRequest)
}
GetServerInfoRequest::GetServerInfoRequest(const GetServerInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetServerInfoRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:struqt.common.v1.GetServerInfoRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServerInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServerInfoRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetServerInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_struqt_2fcommon_2fv1_2fcommon_2eproto_getter, &descriptor_table_struqt_2fcommon_2fv1_2fcommon_2eproto_once,
      file_level_metadata_struqt_2fcommon_2fv1_2fcommon_2eproto[0]);
}
// ===================================================================

class GetServerInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetServerInfoResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetServerInfoResponse, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& started_at(const GetServerInfoResponse* msg);
  static void set_has_started_at(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const GetServerInfoResponse* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetServerInfoResponse::_Internal::started_at(const GetServerInfoResponse* msg) {
  return *msg->_impl_.started_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetServerInfoResponse::_Internal::timestamp(const GetServerInfoResponse* msg) {
  return *msg->_impl_.timestamp_;
}
void GetServerInfoResponse::clear_started_at() {
  if (_impl_.started_at_ != nullptr) _impl_.started_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetServerInfoResponse::clear_timestamp() {
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GetServerInfoResponse::GetServerInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:struqt.common.v1.GetServerInfoResponse)
}
GetServerInfoResponse::GetServerInfoResponse(const GetServerInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetServerInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.started_at_){nullptr}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.server_id_) {}

    , decltype(_impl_.status_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.started_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.started_at_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  ::memcpy(&_impl_.server_id_, &from._impl_.server_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.server_id_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:struqt.common.v1.GetServerInfoResponse)
}

inline void GetServerInfoResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.started_at_){nullptr}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.server_id_) { 0 }

    , decltype(_impl_.status_) { 0 }

  };
}

GetServerInfoResponse::~GetServerInfoResponse() {
  // @@protoc_insertion_point(destructor:struqt.common.v1.GetServerInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetServerInfoResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.started_at_;
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void GetServerInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetServerInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:struqt.common.v1.GetServerInfoResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.started_at_ != nullptr);
      _impl_.started_at_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
  }
  ::memset(&_impl_.server_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.server_id_)) + sizeof(_impl_.status_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServerInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 server_id = 22 [(.google.api.field_behavior) = IMMUTABLE, (.google.api.field_behavior) = REQUIRED];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 176)) {
          _impl_.server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp started_at = 23 [(.google.api.field_behavior) = IMMUTABLE];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_started_at(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .struqt.common.v1.ServerStatus status = 24 [(.google.api.field_behavior) = IMMUTABLE];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 192)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::struqt::common::v1::ServerStatus>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp timestamp = 25 [(.google.api.field_behavior) = REQUIRED];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetServerInfoResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:struqt.common.v1.GetServerInfoResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 22 [(.google.api.field_behavior) = IMMUTABLE, (.google.api.field_behavior) = REQUIRED];
  if (this->_internal_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        22, this->_internal_server_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp started_at = 23 [(.google.api.field_behavior) = IMMUTABLE];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::started_at(this),
        _Internal::started_at(this).GetCachedSize(), target, stream);
  }

  // .struqt.common.v1.ServerStatus status = 24 [(.google.api.field_behavior) = IMMUTABLE];
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        24, this->_internal_status(), target);
  }

  // .google.protobuf.Timestamp timestamp = 25 [(.google.api.field_behavior) = REQUIRED];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:struqt.common.v1.GetServerInfoResponse)
  return target;
}

::size_t GetServerInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:struqt.common.v1.GetServerInfoResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Timestamp started_at = 23 [(.google.api.field_behavior) = IMMUTABLE];
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.started_at_);
    }

    // .google.protobuf.Timestamp timestamp = 25 [(.google.api.field_behavior) = REQUIRED];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.timestamp_);
    }

  }
  // int32 server_id = 22 [(.google.api.field_behavior) = IMMUTABLE, (.google.api.field_behavior) = REQUIRED];
  if (this->_internal_server_id() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_server_id());
  }

  // .struqt.common.v1.ServerStatus status = 24 [(.google.api.field_behavior) = IMMUTABLE];
  if (this->_internal_status() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServerInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetServerInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServerInfoResponse::GetClassData() const { return &_class_data_; }


void GetServerInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetServerInfoResponse*>(&to_msg);
  auto& from = static_cast<const GetServerInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:struqt.common.v1.GetServerInfoResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_started_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_started_at());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_timestamp());
    }
  }
  if (from._internal_server_id() != 0) {
    _this->_internal_set_server_id(from._internal_server_id());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServerInfoResponse::CopyFrom(const GetServerInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:struqt.common.v1.GetServerInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerInfoResponse::IsInitialized() const {
  return true;
}

void GetServerInfoResponse::InternalSwap(GetServerInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetServerInfoResponse, _impl_.status_)
      + sizeof(GetServerInfoResponse::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(GetServerInfoResponse, _impl_.started_at_)>(
          reinterpret_cast<char*>(&_impl_.started_at_),
          reinterpret_cast<char*>(&other->_impl_.started_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServerInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_struqt_2fcommon_2fv1_2fcommon_2eproto_getter, &descriptor_table_struqt_2fcommon_2fv1_2fcommon_2eproto_once,
      file_level_metadata_struqt_2fcommon_2fv1_2fcommon_2eproto[1]);
}
// ===================================================================

class Dummy::_Internal {
 public:
};

Dummy::Dummy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:struqt.common.v1.Dummy)
}
Dummy::Dummy(const Dummy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:struqt.common.v1.Dummy)
}

inline void Dummy::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.version_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Dummy::~Dummy() {
  // @@protoc_insertion_point(destructor:struqt.common.v1.Dummy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Dummy::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Dummy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Dummy::Clear() {
// @@protoc_insertion_point(message_clear_start:struqt.common.v1.Dummy)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dummy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Dummy::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:struqt.common.v1.Dummy)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:struqt.common.v1.Dummy)
  return target;
}

::size_t Dummy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:struqt.common.v1.Dummy)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dummy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Dummy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dummy::GetClassData() const { return &_class_data_; }


void Dummy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Dummy*>(&to_msg);
  auto& from = static_cast<const Dummy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:struqt.common.v1.Dummy)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dummy::CopyFrom(const Dummy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:struqt.common.v1.Dummy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dummy::IsInitialized() const {
  return true;
}

void Dummy::InternalSwap(Dummy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dummy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_struqt_2fcommon_2fv1_2fcommon_2eproto_getter, &descriptor_table_struqt_2fcommon_2fv1_2fcommon_2eproto_once,
      file_level_metadata_struqt_2fcommon_2fv1_2fcommon_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace common
}  // namespace struqt
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::struqt::common::v1::GetServerInfoRequest*
Arena::CreateMaybeMessage< ::struqt::common::v1::GetServerInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::struqt::common::v1::GetServerInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::struqt::common::v1::GetServerInfoResponse*
Arena::CreateMaybeMessage< ::struqt::common::v1::GetServerInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::struqt::common::v1::GetServerInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::struqt::common::v1::Dummy*
Arena::CreateMaybeMessage< ::struqt::common::v1::Dummy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::struqt::common::v1::Dummy >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
